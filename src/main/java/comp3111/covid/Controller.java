package comp3111.covid;

import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;
import javafx.scene.control.cell.PropertyValueFactory;

import java.time.LocalDate;
import java.util.*;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller {

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;

    @FXML
    private DatePicker datepickerTA;

    @FXML
    private ListView<String> listTA;

    @FXML
    private TableView<Record> tableTA;

    @FXML
    private TableColumn<Record,String> columnCountry;

    @FXML
    private TableColumn<Record, Long> columnCases;

    @FXML
    private TableColumn<Record, Long> columnCases1M;

    @FXML
    private Button generateTA;

    @FXML
    private DatePicker startdateCA;

    @FXML
    private DatePicker enddateCA;

    @FXML
    private Button generateCA;

    @FXML
    private ListView<String> listCA;

    @FXML
    private LineChart chartCA;
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

    public void opentabA(Event event) throws Exception {
        //Fill the listview
        datepickerTA.setValue(LocalDate.now());
        listTA.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        String iDataset = textfieldDataset.getText();
        Countries.read("COVID_Dataset_v1.0.csv");
        for (String temp:Countries.getCountries()){
            listTA.getItems().add(temp);
        }
        //Setup columns
        columnCountry.setCellValueFactory(new PropertyValueFactory<>("isoCode"));
        columnCases.setCellValueFactory(new PropertyValueFactory<>("newCases"));
        columnCases1M.setCellValueFactory(new PropertyValueFactory<>("newDeaths"));
    }

    public void generateTableA(ActionEvent actionEvent) throws Exception {
        //Check if date is valid
        //Check if selected countries
        ObservableList<String> selectedcountries;
        selectedcountries = listTA.getSelectionModel().getSelectedItems();
        if (selectedcountries.isEmpty()){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Please choose countries");
            errorAlert.showAndWait();
        }
        else if ((datepickerTA.getValue()==null)) {
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is empty");
            errorAlert.showAndWait();
        }
        else if (datepickerTA.getValue().isAfter(LocalDate.now())){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is after today");
            errorAlert.showAndWait();
        }
        else if (datepickerTA.getValue().isBefore(LocalDate.of(2020,3,1))){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is before 2020 - 03 - 01, No data exists");
            errorAlert.showAndWait();
        }else{
            textAreaConsole.setText("");
            textAreaConsole.setText(textAreaConsole.getText()+"Date is:"+datepickerTA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"Countries:"+selectedcountries);
            //Generate Table
            for (String countryselected: selectedcountries){
                //Setup table
                ObservableList<Record> records = FXCollections.observableArrayList();
                records.addAll(new Record(countryselected,
                                    datepickerTA.getValue(),
                                    Record.getTotalCases(Record.read("COVID_Dataset_v1.0.csv"),
                                                            countryselected,
                                                            datepickerTA.getValue()),
                                    Record.getTotalDeaths(Record.read("COVID_Dataset_v1.0.csv"),
                                        countryselected,
                                        datepickerTA.getValue()),
                                    0
                                    )
                );
                tableTA.setItems(records);
                tableTA.getColumns().addAll(columnCountry,columnCases,columnCases1M);
            }
        }
    }

    public void opentabA2(Event event) throws Exception {
        //Fill the listview
        enddateCA.setValue(LocalDate.now());
        listCA.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        Countries.read("COVID_Dataset_v1.0.csv");
        for (String temp:Countries.getCountries()){
            listCA.getItems().add(temp);
        }
        //Setup charts

    }

    public void generateCA(ActionEvent actionEvent) throws Exception {
        //Check if date is valid
        //Check if selected countries
        //Generate Chart
        //Check if date is valid
        //Check if selected countries
        ObservableList<String> selectedcountries;
        selectedcountries = listCA.getSelectionModel().getSelectedItems();
        if (selectedcountries.isEmpty()){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Please choose countries");
            errorAlert.showAndWait();
        }
        else if (    (startdateCA.getValue()==null) || (enddateCA.getValue()==null) ) {
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is empty");
            errorAlert.showAndWait();
        }
        else if (  startdateCA.getValue().isAfter(LocalDate.now())  || enddateCA.getValue().isAfter(LocalDate.now())  ){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is after today");
            errorAlert.showAndWait();
        }
        else if ( startdateCA.getValue().isBefore(LocalDate.of(2020,3,1))   ||  enddateCA.getValue().isBefore(LocalDate.of(2020,3,1)) ){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is before 2020 - 03 - 01, No data exists");
            errorAlert.showAndWait();
        }else if (enddateCA.getValue().isBefore(startdateCA.getValue())){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("End date is before start date");
            errorAlert.showAndWait();
        }
        else{
            textAreaConsole.setText("");
            textAreaConsole.setText(textAreaConsole.getText()+"Start date is:"+startdateCA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"End date is:"+enddateCA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"Countries:"+selectedcountries);
            //Generate Chart
            Vector<Record> temprecord = Record.read("COVID_Dataset_v1.0.csv");
            Collections.sort(temprecord, Comparator.comparing(Record::getDate) );
            chartCA.getData().clear();
            chartCA.setTitle("Cumulative Confirmed COVID-19 Cases (per 1M)");
            for (Record x : temprecord) {
                for (String country : selectedcountries){
                    Long numofcase=0L;
                    XYChart.Series<LocalDate,Long> series = new XYChart.Series<LocalDate,Long>();
                    if (country.equals(x.getCountry())){
                        numofcase += x.getNewCases();
                        series.getData().add(new XYChart.Data<LocalDate, Long>(x.getDate(),numofcase));
                    }
                    series.setName(country);
                    chartCA.getData().add(series);
                }
            }
        }





    }
}

