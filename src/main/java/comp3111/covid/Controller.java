package comp3111.covid;

import javafx.beans.property.SimpleObjectProperty;
import javafx.collections.FXCollections;
import javafx.collections.ObservableList;
import javafx.event.ActionEvent;
import javafx.event.Event;
import javafx.fxml.FXML;
import javafx.scene.chart.LineChart;
import javafx.scene.chart.XYChart;
import javafx.scene.control.*;

import java.time.LocalDate;
import java.util.Vector;

/**
 * Building on the sample skeleton for 'ui.fxml' Controller Class generated by SceneBuilder 
 */
public class Controller {
    @FXML
    /**
     * The box for choosing task ABC in chart tab
     */
    public ChoiceBox<String> choiceboxCA;

    @FXML
    /**
     * The box for choosing task ABC in table tab
     */
    public ChoiceBox<String> choiceboxTA;
    /**
     * The title of the table
     */
    public Label TAtitle;

    @FXML
    private Tab tabTaskZero;

    @FXML
    private TextField textfieldISO;

    @FXML
    private Button buttonConfirmedDeaths;

    @FXML
    private TextField textfieldDataset;

    @FXML
    private Button buttonRateOfVaccination;

    @FXML
    private Button buttonConfirmedCases;

    @FXML
    private Tab tabReport1;

    @FXML
    private Tab tabReport2;

    @FXML
    private Tab tabReport3;

    @FXML
    private Tab tabApp1;

    @FXML
    private Tab tabApp2;

    @FXML
    private Tab tabApp3;

    @FXML
    private TextArea textAreaConsole;

    @FXML
    /**
     * The datepicker in table tab
     */
    private DatePicker datepickerTA;

    @FXML
    /**
     * The country list in table tab
     */
    private ListView<String> listTA;

    @FXML
    /**
     * The table in table tab
     */
    private TableView<StatisticsReport> tableTA;

    @FXML
    private TableColumn<StatisticsReport,String> columnCountry;

    @FXML
    private TableColumn<StatisticsReport, Long> columnCases;

    @FXML
    private TableColumn<StatisticsReport, Double> columnCases1M;

    @FXML
    private Button generateTA;

    @FXML
    private DatePicker startdateCA;

    @FXML
    private DatePicker enddateCA;

    @FXML
    private Button generateCA;

    @FXML
    private ListView<String> listCA;

    @FXML
    private LineChart<String,Double> chartCA;

    private TableColumn<StatisticsReport,Long> columnDeath;
    private TableColumn<StatisticsReport,Double> columnDeath1m;
    private TableColumn<StatisticsReport,Long> columnFully;
    private TableColumn<StatisticsReport,Double> columnfull1M;


    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Cases" button on the Task Zero Tab 
     *  
     */
    @FXML
    void doConfirmedCases(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedCases(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Confirmed Deaths" button on the Task Zero Tab
     *  
     */
    @FXML
    void doConfirmedDeaths(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getConfirmedDeaths(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

  
    /**
     *  Task Zero
     *  To be triggered by the "Rate of Vaccination" button on the Task Zero Tab
     *  
     */
    @FXML
    void doRateOfVaccination(ActionEvent event) {
    	String iDataset = textfieldDataset.getText();
    	String iISO = textfieldISO.getText();
    	String oReport = DataAnalysis.getRateOfVaccination(iDataset, iISO);
    	textAreaConsole.setText(oReport);
    }

    /**
     * Set up the table tab.
     * Fill the country list and choicebox
     * Set datepicker to today
     * @param event
     * @throws Exception
     */
    public void opentabA(Event event) throws Exception {
        //Fill the listview
        datepickerTA.setValue(LocalDate.now());
        listTA.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        String iDataset = textfieldDataset.getText();
        Countries.read("COVID_Dataset_v1.0.csv");
        if(listTA.getItems().isEmpty()) {
	        for (Country temp:Countries.getCountries()){
	            listTA.getItems().add(temp.getName());
	        }
        }
        choiceboxTA.getItems().clear();
        choiceboxTA.getItems().add("A - Confirmed Cases");
        choiceboxTA.getItems().add("B - Confirmed Deaths");
        choiceboxTA.getItems().add("C - Rate of Vaccination");
        choiceboxTA.getSelectionModel().selectFirst();
        //Setup columns
    }

    /**
     * Fill the table after validating input
     * @param actionEvent
     * @throws Exception
     */
    public void generateTableA(ActionEvent actionEvent) throws Exception {
        //Check if date is valid
        //Check if selected countries
        ObservableList<String> selectedcountries;
        selectedcountries = listTA.getSelectionModel().getSelectedItems();
        if (selectedcountries.isEmpty()){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Please choose countries");
            errorAlert.showAndWait();
        }
        else if ((datepickerTA.getValue()==null)) {
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is empty");
            errorAlert.showAndWait();
        }
        else if (datepickerTA.getValue().isAfter(LocalDate.now())){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is after today");
            errorAlert.showAndWait();
        }
        else if (datepickerTA.getValue().isBefore(LocalDate.of(2020,3,1))){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is before 2020 - 03 - 01, No data exists");
            errorAlert.showAndWait();
        }else{
            textAreaConsole.setText("");
            textAreaConsole.setText(textAreaConsole.getText()+"Date is:"+datepickerTA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"Countries:"+selectedcountries);
            //Generate Table

            ObservableList<StatisticsReport> records = FXCollections.observableArrayList();
            for (String countryselected: selectedcountries){
                //Setup table
                //System.out.println("Selected :"+countryselected);
                StatisticsReport temp = new Records("COVID_Dataset_v1.0.csv").getLatestStatistics(Countries.toIsoCode(countryselected),datepickerTA.getValue());
                //System.out.println(temp.getCountry()+"  "+temp.getDate()+" "+temp.getTotalCases());
                records.add( temp);
            }
            columnCountry = new TableColumn<StatisticsReport,String>();
            columnCases = new TableColumn<StatisticsReport,Long>();
            columnCases1M = new TableColumn<StatisticsReport,Double>();
            columnDeath = new TableColumn<StatisticsReport,Long>();
            columnDeath1m = new TableColumn<StatisticsReport,Double>();
            columnFully = new TableColumn<StatisticsReport,Long>();
            columnfull1M = new TableColumn<StatisticsReport,Double>();


            columnCountry.setText("Country");
            columnCases.setText("Total Cases");
            columnCases1M.setText("Cases per 1M");
            columnDeath.setText("Total Deaths");
            columnDeath1m.setText("Total Deaths (Per1M)");
            columnFully.setText("Fully vaccinated");
            columnfull1M.setText("Rate of vaccination");
            tableTA.setItems(records);
            columnCountry.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getCountry()));
            columnCases.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getTotalCases().getValue()));
            columnCases1M.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getTotalCasesPerMillion().getValue()));
            columnDeath.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getTotalDeaths().getValue()));
            columnDeath1m.setCellValueFactory(param -> new SimpleObjectProperty<>( param.getValue().getTotalDeathsPerMillion().getValue()));
            columnFully.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getFullyVaccinated().getValue()));
            columnfull1M.setCellValueFactory(param -> new SimpleObjectProperty<>(param.getValue().getRateOfVaccination().getValue()));
            tableTA.getColumns().clear();
            if (choiceboxTA.getValue().equals("A - Confirmed Cases")){
                TAtitle.setText("Number of Confirmed COVID-19 Cases as of "+datepickerTA.getValue().toString());
                tableTA.getColumns().addAll(columnCountry,columnCases,columnCases1M);
            }else if (choiceboxTA.getValue().equals("B - Confirmed Deaths")){
                TAtitle.setText("Number of Confirmed COVID-19 Deaths as of "+datepickerTA.getValue().toString());
                tableTA.getColumns().addAll(columnCountry,columnDeath,columnDeath1m);
            }else{
                TAtitle.setText("Rate of Vaccination against COVID-19 as of "+datepickerTA.getValue().toString());
                tableTA.getColumns().addAll(columnCountry,columnFully,columnfull1M);
            }
        }
    }

    /**
     * Set up chart tab
     * Fill choicebox
     * Fill country list
     * set enddte datepicker to today
     * @param event
     * @throws Exception
     */
    public void opentabA2(Event event) throws Exception {
        //Fill the listview
        enddateCA.setValue(LocalDate.now());
        listCA.getSelectionModel().setSelectionMode(SelectionMode.MULTIPLE);
        Countries.read("COVID_Dataset_v1.0.csv");
        if(listCA.getItems().isEmpty()) {
	        for (Country temp:Countries.getCountries()){
	            listCA.getItems().add(temp.getName());
	        }
        }
        choiceboxCA.getItems().clear();
        choiceboxCA.getItems().add("A - Confirmed Cases");
        choiceboxCA.getItems().add("B - Confirmed Deaths");
        choiceboxCA.getItems().add("C - Rate of Vaccination");
        choiceboxCA.getSelectionModel().selectFirst();
        //Setup charts

    }

    /**
     * Validate input and generate chart accordingly
     * @param actionEvent
     * @throws Exception
     */
    public void generateCA(ActionEvent actionEvent) throws Exception {
        //Check if date is valid
        //Check if selected countries
        //Generate Chart
        //Check if date is valid
        //Check if selected countries
        ObservableList<String> selectedcountries;
        selectedcountries = listCA.getSelectionModel().getSelectedItems();
        if (selectedcountries.isEmpty()){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Please choose countries");
            errorAlert.showAndWait();
        }
        else if (    (startdateCA.getValue()==null) || (enddateCA.getValue()==null) ) {
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is empty");
            errorAlert.showAndWait();
        }
        else if (  startdateCA.getValue().isAfter(LocalDate.now())  || enddateCA.getValue().isAfter(LocalDate.now())  ){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is after today");
            errorAlert.showAndWait();
        }
        else if ( startdateCA.getValue().isBefore(LocalDate.of(2020,3,1))   ||  enddateCA.getValue().isBefore(LocalDate.of(2020,3,1)) ){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("Date is before 2020 - 03 - 01, No data exists");
            errorAlert.showAndWait();
        }else if (enddateCA.getValue().isBefore(startdateCA.getValue())){
            Alert errorAlert = new Alert(Alert.AlertType.ERROR);
            errorAlert.setHeaderText("Input not valid");
            errorAlert.setContentText("End date is before start date");
            errorAlert.showAndWait();
        }
        else{
            textAreaConsole.setText("");
            textAreaConsole.setText(textAreaConsole.getText()+"Start date is:"+startdateCA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"End date is:"+enddateCA.getValue().toString());
            textAreaConsole.setText(textAreaConsole.getText()+"Countries:"+selectedcountries);
            //Generate Chart
            chartCA.getData().clear();
            chartCA.setAnimated(false);
            chartCA.setCreateSymbols(false);
            chartCA.setTitle("Cumulative Confirmed COVID-19 Cases (per 1M)");
                for (String country : selectedcountries){
                    Records temprecords = new Records("COVID_Dataset_v1.0.csv");
                    Vector<StatisticsReport> tempvector =  temprecords.getStatisticsForPeriod(Countries.toIsoCode((country)), startdateCA.getValue(), enddateCA.getValue());
                    XYChart.Series<String, Double> series = new XYChart.Series<String, Double>();
                    for (StatisticsReport x : tempvector) {
                            if (choiceboxCA.getValue().equals("A - Confirmed Cases")) {
                                chartCA.setTitle("Cumulative Confirmed COVID-19 Cases (per 1M)");
                                series.getData().add(new XYChart.Data<String, Double>(x.getDate().toString(), x.getTotalCasesPerMillion().getValue()));
                            }else if (choiceboxCA.getValue().equals("B - Confirmed Deaths")){
                                chartCA.setTitle("Cumulative Confirmed COVID-19 Deaths (per 1M)");
                                series.getData().add(new XYChart.Data<String, Double>(x.getDate().toString(), x.getTotalDeathsPerMillion().getValue()));
                            }else{
                                chartCA.setTitle("Cumulative Rate of Vaccination against COVID-19");
                                series.getData().add(new XYChart.Data<String, Double>(x.getDate().toString(), x.getRateOfVaccination().getValue()));
                            }
                    }
                    series.setName(country);
                    chartCA.getData().add(series);
                }
        }





    }
}